generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Category {
    id String @id @default(cuid())

    name  String
    color String @default("#94a3b8")// RGB

    room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId String
    cards  Card[]

    @@index([roomId])
}

model Card {
    id         String   @id @default(cuid())
    room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId     String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    creator    User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId  String

    text String @db.Text

    @@index([roomId])
    @@index([categoryId])
    @@index([creatorId])
}

model Poll {
    id String @id @default(cuid())

    room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId String

    @@index([roomId])
}

model Room {
    id String @id @default(cuid())

    name String

    anonymous Boolean @default(false)
    mutable   Boolean @default(true)

    owner   User   @relation(name: "OwnedRooms", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String

    members User[] @relation(name: "RoomMembers")

    categories Category[]
    cards      Card[]
    polls      Poll[]

    @@index([ownerId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    ownedRooms Room[] @relation(name: "OwnedRooms")
    rooms      Room[] @relation(name: "RoomMembers")
    cards       Card[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
